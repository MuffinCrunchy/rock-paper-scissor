# -*- coding: utf-8 -*-
"""RockPaperScissor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_mo-_snGYUFpLY0-m3ouuifB9hIyfzMg

<a href="https://githubtocolab.com/giswqs/geemap/blob/master/examples/notebooks/35_geemap_colab.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open in Colab"/></a>

## **Library**
"""

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
print(tf.__version__)

"""## **Upload Datasets**"""

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

"""## **Extract Dataset**"""

# Extract Zip File
import zipfile
import os
local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

base_dir = '/tmp/rockpaperscissors/rps-cv-images'

"""## **Preprocessing Image**"""

train_datagen = ImageDataGenerator(
    rescale =1./255,
    rotation_range = 20,
    horizontal_flip = True,
    shear_range = 0.2,
    validation_split = 0.3
)

train_generator = train_datagen.flow_from_directory(
    base_dir, #base data
    target_size = (150, 150),
    batch_size = 16,
    class_mode = 'categorical',
    subset = 'training' #training data
)

validation_generator = train_datagen.flow_from_directory(
    base_dir, #base data
    target_size = (150, 150),
    batch_size = 16,
    class_mode = 'categorical',
    subset = 'validation' #validation data
)

print(train_generator.class_indices)

train_generator.image_shape

"""## **Callback**"""

class callbacks(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs = None):
        if logs.get('accuracy') >= 95e-2:
            print('\nAccuracy has reach = %2.2f%%' %(logs['accuracy']*100))
            self.model.stop_training = True

"""## **Modelling**"""

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(256, (3, 3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(512, activation='relu'),
                                    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(
    optimizer = tf.optimizers.Adam(),
    loss = 'categorical_crossentropy',
    metrics = ['accuracy']
)

"""## **Training**"""

model.fit(
    train_generator,
    steps_per_epoch = 25,
    epochs = 50,
    validation_data = validation_generator,
    validation_steps = 10,
    verbose = 1,
    callbacks = callbacks()
)

"""## **Testing**"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploadimg = files.upload()

for fn in uploadimg.keys():
  path = fn
  img = image.load_img(path, target_size=(150, 150))
  imgploat = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=16)

  print(fn)
  print(classes)
  if np.all(classes==[[1,0,0]]):
    print('paper')
  elif np.all(classes==[[0,1,0]]):
    print('rock')
  elif np.all(classes==[[0,0,1]]):
    print('scissor')
  else:
    print('error')

"""## **Save Model**"""

model_name = 'rps_cnn.h5'
model.save(model_name, save_format='h5')

"""## **Load Model**"""

new_model = tf.keras.models.load_model('rps_cnn.h5')

# Check its architecture
new_model.summary()